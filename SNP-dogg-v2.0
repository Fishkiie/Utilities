#!/usr/bin/env python2.7

# modules
import argparse
import sys
import itertools
import multiprocessing as mp
from multiprocessing.pool import ThreadPool
import time

printHelp = "off"
if len(sys.argv) < 2:
	printHelp = "on"
elif len(sys.argv) >= 2:
	if (sys.argv[1] in ["-h", "--help"]):
		printHelp = "on"

if printHelp == "on":
	sys.exit('''

SNP-Dogg
version 2.0

last update: April 30, 2018


-in	--input-file		VCF Format (not BCF) 						[stdin]
	--GATK			Input file is from GATK					 	[off]
-out	--output-file		Output filtered VCF file 					[stdout]
-q	--quality		Minimum call quality (VCF field 6) 				[off]
	--qual-by-depth		Use the GATK QD field (QUAL normalized by depth of coverage)	[off]
-amq	--avg-map-qual		Minimum average mapping quality 				[off]
-af	--alt-frac		Min % of reads confirming alternative allele (0%-100%)		[off]
-d	--min-depth		Minimum coverage of the SNP (based on DP4 field) 		[off]
-D	--max-depth		... and maximum 						[100000]
	--both-strands		Both strands have to fulfill -d/-D and -af (if on)		[off]
	--min-read-per-strand	Both strands need to have at least <N> reads mapped		[off]
-fs	--fisher-score		Maximum accepted phred-score from Fisher's exact test		[off]
-mqzf	--map-qual-zero-frac	Max % of reads with mapping quality 0 (0%-100%)			[off]
-p	--threads		Number of threads to assign to the process			[1]

''')

# parser
p = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, add_help=False)
p.add_argument("-in", "--input-file")
p.add_argument("--GATK", action="store_true")
p.add_argument("-out", "--output-file")
p.add_argument("-q", "--quality", default = 0, type=float)
p.add_argument("--qual-by-depth", action="store_true")
p.add_argument("-amq", "--avg-map-qual", type=int, default=0)
p.add_argument("-af", "--alt-frac", default=0, type=float)
p.add_argument("-d", "--min-depth", default = 0, type=int)
p.add_argument("-D", "--max-depth", default = float('inf'), type=int)
p.add_argument("--both-strands", action="store_true")
p.add_argument("--min-read-per-strand", default=0, type=int)
p.add_argument("-fs", "--fisher-score", default=float('inf'))
p.add_argument("-mqzf", "--map-qual-zero-frac", default=100, type=float)
p.add_argument("-p", "--threads", type=int, default=1)
args = p.parse_args()


### read input VCF file, print filtered header, do filtering 

if args.input_file:
	INPUT = open(args.input_file, "r")
else:
	INPUT = sys.stdin

if args.output_file:
	OUTPUT = open(args.output_file, "w")
else:
	OUTPUT = sys.stdout

if args.min_read_per_strand and args.both_strands:
	sys.exit('''

ERROR: --min-read-per-strand and --both-strands are mutually exclusive. Please pick only one of them.

''')


### multithreading options ###

pool = ThreadPool(processes=int(args.threads))
#queue = mp.Queue()


### counters ### 

Counters = {
"quality":0,
"mapping_quality":0,
"coverage_depth":0,
"minimum_read_per_strand":0,
"mapping_quality_zero_fraction":0,
"alt_allele_fraction":0,
"fisher_score":0
}


### functions ###

def quality(line, lst, info, args, Counters):
	try:
		if args.qual_by_depth:
			quality = info["QD"]
		else:
			quality = lst[5]
		#
		if float(quality) >= float(args.quality):
			return True
		else:
			Counters["quality"] += 1
			return False
	except:
		#sys.stderr.write("ERROR: quality check failed. Line:\n{0}\n".format(line))
		Counters["quality"] += 1
		return False

def mapqual(line, info, args, Counters):
	try:
		if float(info["MQ"]) >= float(args.avg_map_qual):
			return True
		else:
			Counters["mapping_quality"] += 1
			return False
	except:
		#sys.stderr.write("ERROR: mapping quality check failed. Line:\n{0}\n".format(line))
                Counters["mapping_quality"] += 1
		return False

def covdepth(line, info, genotype, args, Counters):
	try:
		if (args.both_strands) or (args.min_read_per_strand):
			try:
				if args.GATK:
					split_cov = genotype["SAC"].split(",")
				else:
					split_cov = info["DP4"].split(",")
				#
				for_cov = [split_cov[i] for i in range(0,len(split_cov)) if i%2==0]
				rev_cov = [split_cov[i] for i in range(0,len(split_cov)) if i%2==1]
			except KeyError:
				try:
					for_cov = info["ADF"].split(",")
					rev_cov = info["ADR"].split(",")
				except KeyError:
					Counters["coverage_depth"] += 1
					sys.stderr.write("ERROR: The --both-strands option is not applicable\n")
					sys.stderr.write("Your VCF file doesn't contain SAC, DP4 or ADF/ADR\n\n")
					return False
			tot_for_cov = float(0)
			for x in for_cov:
				tot_for_cov += float(x)
			tot_rev_cov = float(0)
			for x in rev_cov:
				tot_rev_cov += float(x)
			# when --both-strands
			if args.both_strands:
				if float(min_depth) <= float(tot_for_cov) <= float(args.max_depth) and \
				float(min_depth) <= float(tot_rev_cov) <= float(args.max_depth):
					return True
				else:
					Counters["coverage_depth"] += 1
					return False
			# when --min-read-per-strand
			elif args.min_read_per_strand:
				if float(tot_for_cov) >= float(args.min_read_per_strand) and \
				float(tot_rev_cov) >= float(args.min_read_per_strand):
					return True
				else:
					Counters["minimum_read_per_strand"] += 1
					return False
		#
		else:
			if float(args.min_depth) <= float(info["DP"]) <= float(args.max_depth):
				return True
			else:
				Counters["coverage_depth"] += 1
				return False
	except:
		#sys.stderr.write("coverage check failed. Line:\n{0}\n".format(line))
		Counters["coverage_depth"] += 1
                return False

def mqzf(line, info, genotype, args, Counters):
	try:
		if info["VariantType"] == "SNP":
			if args.GATK:
				mqzf = (float(info["MQ0"])/float(info["DP"]))*100
			else:
				mqzf = float(info["MQ0F"])*100
		else:
			if args.GATK:
				mqzf = (float(genotype["MQ0"])/float(genotype["DP"]))*100
			else:
				mqzf = float(info["MQ0F"])*100
			#
		if float(mqzf) <= float(args.map_qual_zero_frac):
			return True
		else:
			Counters["mapping_quality_zero_fraction"] += 1
			return False
	except:
		#sys.stderr.write("ERROR: MQ0F check failed. Line:\n{0}\n".format(line))
		Counters["mapping_quality_zero_fraction"] += 1
                return False

def altfrac(line, info, genotype, args, Counters):
	try:
		if args.both_strands:
			try:
				if args.GATK:
					split_cov = genotype["SAC"].split(",")
				else:
					split_cov = info["DP4"].split(",")
				#
				for_cov = [split_cov[i] for i in range(0,len(split_cov)) if i%2==0]
				rev_cov = [split_cov[i] for i in range(0,len(split_cov)) if i%2==1]
			except KeyError:
				try:
					for_cov = info["ADF"].split(",")
					rev_cov = info["ADR"].split(",")
				except KeyError:
					sys.stderr.write("ERROR: The --both-strands option is not applicable\n")
					sys.stderr.write("Your VCF file doesn't contain DP4 or ADF/ADR\n\n")
					Counters["alt_allele_fraction"] += 1
					return False
			tot_for_cov = float(0)
			for x in for_cov:
				tot_for_cov += float(x)
			tot_rev_cov = float(0)
			for x in rev_cov:
				tot_rev_cov += float(x)
			alt_for_cov = float(0)
			for x in for_cov[1:]:
				alt_for_cov += float(x)
			alt_rev_cov = float(0)
			for x in rev_cov[1:]:
				alt_rev_cov += float(x)
			if float((alt_for_cov / tot_for_cov)*100) >= float(args.alt_frac) and \
			float((alt_rev_cov / tot_rev_cov)*100) >= float(args.alt_frac):
				return True
			else:
				Counters["alt_allele_fraction"] += 1
				return False
		else:
			alt_count = 0
			for x in genotype["AD"].split(",")[1:]:
				alt_count += int(x)
			ref_count = int(genotype["AD"].split(",")[0])
			tot_count = ref_count + alt_count
			if (float(alt_count) / float(tot_count))*100 >= float(args.alt_frac):
				return True
			else:
				Counters["alt_allele_fraction"] += 1
				return False
	except:
		#sys.stderr.write("ERROR: allele fraction check failed. Line:\n{0}\n".format(line))
		Counters["alt_allele_fraction"] += 1
                return False

def fisher_score(line, info, args, Counters):
	try:
		if float(info["FS"]) <= float(args.fisher_score):
			return True
		else:
			Counters["fisher_score"] += 1
			return False
	except:
		#sys.stderr.write("ERROR: fisher score check failed. Line:\n{0}\n".format(line))
		Counters["fisher_score"] += 1
                return False

#def var_filter(Pass_counters, line, lst, info, genotype, args, queue, Counters):
def var_filter(line, args, Counters):
	try:
		if line[0:1] == "#":
			return line
		else:
			lst = line.rstrip("\n\r\b").split("\t")
			info = { str(x.split("=")[0]):str(x.split("=")[1]) for x in lst[7].split(";") if "=" in x }
			gt_key = lst[8].split(":")
	                gt_value = lst[9].split(":")
	                genotype = { gt_key[i]:gt_value[i] for i in range(0, len(gt_key)) }
			if \
			quality(line, lst, info, args, Counters) == True \
			and mapqual(line, info, args, Counters) == True \
			and covdepth(line, info, genotype, args, Counters) == True \
			and mqzf(line, info, genotype, args, Counters) == True \
			and fisher_score(line, info, args, Counters) == True \
			and altfrac(line, info, genotype, args, Counters) == True \
			:
				return line
			else:
				pass
	except:
		sys.stderr.write("ERROR: variant filtering step failed. Line:\n{0}\n".format(line))

### process lines ###

outlst = [pool.apply(var_filter, args=(line, args, Counters)) for line in INPUT]

for line in outlst:
	try:
		OUTPUT.write(line)
	except:
		pass

sys.stderr.write("Discarded variants per FAILED filter:\n")
for key in Counters:
	sys.stderr.write("{0}\t{1}\n".format(key, Counters[key]))


if args.input_file:
	INPUT.close()
if args.output_file:
	OUTPUT.close()
