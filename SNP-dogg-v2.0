#!/usr/bin/env python2.7

# modules
import argparse
import sys
import itertools
import multiprocessing as mp
from multiprocessing.pool import ThreadPool

printHelp = "off"
if len(sys.argv) < 2:
	printHelp = "on"
elif len(sys.argv) >= 2:
	if (sys.argv[1] in ["-h", "--help"]):
		printHelp = "on"

if printHelp == "on":
	sys.exit('''

SNP-Dogg
version 2.0

last update: April 20, 2018


-in	--input-file		VCF Format (not BCF) 						[stdin]
	--GATK			Input file is from GATK					 	[off]
-out	--output-file		Output filtered VCF file 					[stdout]
-q	--quality		Minimum call quality (VCF field 6) 				[off]
	--qual-by-depth		Use the GATK QD field (QUAL normalized by depth of coverage)	[off]
-amq	--avg-map-qual		Minimum average mapping quality 				[off]
-af	--alt-frac		Min % of reads confirming alternative allele (0%-100%)		[off]
-d	--min-depth		Minimum coverage of the SNP (based on DP4 field) 		[off]
-D	--max-depth		... and maximum 						[100000]
	--both-strands		Both strands have to fulfill -d/-D and -af (if on)		[off]
-mqzf	--map-qual-zero-frac	Max % of reads with mapping quality 0 (0%-100%)			[off]
-p	--threads		Number of threads to assign to the process			[1]

''')

# parser
p = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, add_help=False)
p.add_argument("-in", "--input-file")
p.add_argument("--GATK", action="store_true")
p.add_argument("-out", "--output-file")
p.add_argument("-q", "--quality", default = 0, type=float)
p.add_argument("--qual-by-depth", action="store_true")
p.add_argument("-amq", "--avg-map-qual", type=int, default=0)
p.add_argument("-af", "--alt-frac", default=0, type=float)
p.add_argument("-d", "--min-depth", default = 0, type=int)
p.add_argument("-D", "--max-depth", default = 100000, type=int)
p.add_argument("--both-strands", action="store_true")
p.add_argument("-mqzf", "--map-qual-zero-frac", default=100, type=float)
p.add_argument("-p", "--threads", type=int, default=1)
args = p.parse_args()


### read input VCF file, print filtered header, do filtering 

if args.input_file:
	INPUT = open(args.input_file, "r")
else:
	INPUT = sys.stdin

if args.output_file:
	OUTPUT = open(args.output_file, "w")
else:
	OUTPUT = sys.stdout


### multithreading options ###

pool = ThreadPool(processes=int(args.threads))
queue = mp.Queue()


### functions ###

def quality(lst, info, args):
	if args.qual_by_depth:
		quality = info["QD"]
	else:
		quality = lst[5]
	#
	if float(quality) >= float(args.quality):
		return True
	else:
		return False

def mapqual(info, args):
	if float(info["MQ"]) >= float(args.avg_map_qual):
		return True
	else:
		return False

def covdepth(info, genotype, args):
	if args.both_strands:
		try:
			if args.GATK:
				split_cov = genotype["SAC"]
			else:
				split_cov = info["DP4"].split(",")
			#
			for_cov = [split_cov[i] for i in range(0,len(split_cov)) if i%2==0]
			rev_cov = [split_cov[i] for i in range(0,len(split_cov)) if i%2==1]
		except KeyError:
			try:
				for_cov = info["ADF"].split(",")
				rev_cov = info["ADR"].split(",")
			except KeyError:
				sys.stderr.write("ERROR: The --both-strands option is not applicable\n")
				sys.stderr.write("Your VCF file doesn't contain DP4 or ADF/ADR\n\n")
		tot_for_cov = float(0)
		for x in for_cov:
			tot_for_cov += float(x)
		tot_rev_cov = float(0)
		for x in rev_cov:
			tot_rev_cov += float(x)
		if float(min_depth) <= float(tot_for_cov) <= float(args.max_depth) and \
		float(min_depth) <= float(tot_rev_cov) <= float(args.max_depth):
			return True
		else:
			return False
	#
	else:
		if float(args.min_depth) <= float(info["DP"]) <= float(args.max_depth):
			return True
		else:
			return False

def mqzf(info, genotype, args):
	if info["VariantType"] == "SNP":
		if args.GATK:
			mqzf = (float(info["MQ0"])/float(info["DP"]))*100
		else:
			mqzf = float(info["MQ0F"])*100
	else:
		if args.GATK:
			mqzf = (float(genotype["MQ0"])/float(genotype["DP"]))*100
		else:
			mqzf = float(info["MQ0F"])*100
		#
	if float(mqzf) <= float(args.map_qual_zero_frac):
		return True
	else:
		return False

def altfrac(genotype, args):
	if args.both_strands:
		try:
			if args.GATK:
				split_cov = genotype["SAC"]
			else:
				split_cov = info["DP4"].split(",")
			#
			for_cov = [split_cov[i] for i in range(0,len(split_cov)) if i%2==0]
			rev_cov = [split_cov[i] for i in range(0,len(split_cov)) if i%2==1]
		except KeyError:
			try:
				for_cov = info["ADF"].split(",")
				rev_cov = info["ADR"].split(",")
			except KeyError:
				sys.stderr.write("ERROR: The --both-strands option is not applicable\n")
				sys.stderr.write("Your VCF file doesn't contain DP4 or ADF/ADR\n\n")
		tot_for_cov = float(0)
		for x in for_cov:
			tot_for_cov += float(x)
		tot_rev_cov = float(0)
		for x in rev_cov:
			tot_rev_cov += float(x)
		alt_for_cov = float(0)
		for x in for_cov[1:]:
			alt_for_cov += float(x)
		alt_rev_cov = float(0)
		for x in rev_cov[1:]:
			alt_rev_cov += float(x)
		if (alt_for_cov / tot_for_cov)*100 >= float(args.alt_frac) and \
		(alt_rev_cov / tot_rev_cov)*100 >= float(args.alt_frac):
			return True
		else:
			return False
	else:
		alt_count = 0
		for x in genotype["AD"].split(",")[1:]:
			alt_count += int(x)
		ref_count = int(genotype["AD"].split(",")[0])
		tot_count = ref_count + alt_count
		if (float(alt_count) / float(tot_count))*100 >= float(args.alt_frac):
			return True
		else:
			return False

def var_filter(line, lst, info, genotype, args, queue):
	if  \
	(quality(lst, info, args) == True) and \
	(mapqual(info, args) == True) and \
	(covdepth(info, genotype, args) == True) and \
	(mqzf(info, genotype, args) == True) and \
	(altfrac(genotype, args) == True):
		queue.put(line)
	else:
		pass

### process lines ###

(j,l) = (0,0)
for line in INPUT:
	if line[0:1] == "#":
		OUTPUT.write(line)
	else:
		l+=1
		lst = line.rstrip("\n\r\b").split("\t")
		info = { str(x.split("=")[0]):str(x.split("=")[1]) for x in lst[7].split(";") if "=" in x }
		gt_key = lst[8].split(":")
		gt_value = lst[9].split(":")
		genotype = { gt_key[i]:gt_value[i] for i in range(0, len(gt_key)) }
		pool.apply_async(var_filter, args=(line, lst, info, genotype, args, queue,))


### print to output ### 

while int(queue.qsize()) > 0:
	item = queue.get()
	j+=1
	OUTPUT.write(item)

k = l-j

sys.stderr.write('''

Total variants: {0}
Discarded variants: {1}
Retained variants: {2}

'''.format(l, k, j))

if args.input_file:
	INPUT.close()
if args.output_file:
	OUTPUT.close()
